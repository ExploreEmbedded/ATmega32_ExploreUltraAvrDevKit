
01a-LedBlinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001bf  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f8  00000000  00000000  000003f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019a  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000179  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main() 
{
	uint8_t i;
  /* Configure all the ports as Output */
    DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xff;
  70:	87 bb       	out	0x17, r24	; 23
    DDRC = 0xff;
  72:	84 bb       	out	0x14, r24	; 20
    DDRD = 0xff; 
  74:	81 bb       	out	0x11, r24	; 17
        _delay_ms(100);
	   }
	   
	   for(i=0;i<8;i++)
	   {
		 PORTA = 1<<i; /* Turn ON and OFF one LED at a time */
  76:	61 e0       	ldi	r22, 0x01	; 1
  78:	70 e0       	ldi	r23, 0x00	; 0
	   }
	   
	  
	    for(i=0;i<8;i++)
	   	{
		 PORTA = 0x80>>i; /* Turn ON and OFF one LED at a time */
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f0 e0       	ldi	r31, 0x00	; 0
    
    while(1)
    {
       for(i=0;i<2;i++)
	   {
	    PORTA = 0xff; /* Turn ON all the leds connected to Ports */
  7e:	8b bb       	out	0x1b, r24	; 27
        PORTB = 0xff;
  80:	88 bb       	out	0x18, r24	; 24
        PORTC = 0xff;
  82:	85 bb       	out	0x15, r24	; 21
        PORTD = 0xff;
  84:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	31 ee       	ldi	r19, 0xE1	; 225
  8a:	44 e0       	ldi	r20, 0x04	; 4
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	40 40       	sbci	r20, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
        _delay_ms(100);
        
        PORTA = 0x00; /* Turn OFF all the leds connected to Ports */
  98:	1b ba       	out	0x1b, r1	; 27
        PORTB = 0x00;
  9a:	18 ba       	out	0x18, r1	; 24
        PORTC = 0x00;
  9c:	15 ba       	out	0x15, r1	; 21
        PORTD = 0x00;
  9e:	12 ba       	out	0x12, r1	; 18
  a0:	5f ef       	ldi	r21, 0xFF	; 255
  a2:	91 ee       	ldi	r25, 0xE1	; 225
  a4:	24 e0       	ldi	r18, 0x04	; 4
  a6:	51 50       	subi	r21, 0x01	; 1
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	20 40       	sbci	r18, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
    
    while(1)
    {
       for(i=0;i<2;i++)
	   {
	    PORTA = 0xff; /* Turn ON all the leds connected to Ports */
  b2:	8b bb       	out	0x1b, r24	; 27
        PORTB = 0xff;
  b4:	88 bb       	out	0x18, r24	; 24
        PORTC = 0xff;
  b6:	85 bb       	out	0x15, r24	; 21
        PORTD = 0xff;
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	3f ef       	ldi	r19, 0xFF	; 255
  bc:	41 ee       	ldi	r20, 0xE1	; 225
  be:	54 e0       	ldi	r21, 0x04	; 4
  c0:	31 50       	subi	r19, 0x01	; 1
  c2:	40 40       	sbci	r20, 0x00	; 0
  c4:	50 40       	sbci	r21, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
        _delay_ms(100);
        
        PORTA = 0x00; /* Turn OFF all the leds connected to Ports */
  cc:	1b ba       	out	0x1b, r1	; 27
        PORTB = 0x00;
  ce:	18 ba       	out	0x18, r1	; 24
        PORTC = 0x00;
  d0:	15 ba       	out	0x15, r1	; 21
        PORTD = 0x00;
  d2:	12 ba       	out	0x12, r1	; 18
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	21 ee       	ldi	r18, 0xE1	; 225
  d8:	34 e0       	ldi	r19, 0x04	; 4
  da:	91 50       	subi	r25, 0x01	; 1
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
        _delay_ms(100);
	   }
	   
	   for(i=0;i<8;i++)
	   {
		 PORTA = 1<<i; /* Turn ON and OFF one LED at a time */
  ea:	ab 01       	movw	r20, r22
  ec:	02 2e       	mov	r0, r18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x86>
  f0:	44 0f       	add	r20, r20
  f2:	0a 94       	dec	r0
  f4:	ea f7       	brpl	.-6      	; 0xf0 <main+0x84>
  f6:	4b bb       	out	0x1b, r20	; 27
         PORTB = 1<<i;
  f8:	48 bb       	out	0x18, r20	; 24
         PORTC = 1<<i;
  fa:	45 bb       	out	0x15, r20	; 21
         PORTD = 1<<i;
  fc:	42 bb       	out	0x12, r20	; 18
  fe:	4f ef       	ldi	r20, 0xFF	; 255
 100:	51 ee       	ldi	r21, 0xE1	; 225
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	41 50       	subi	r20, 0x01	; 1
 106:	50 40       	sbci	r21, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x98>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0xa2>
 10e:	00 00       	nop
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
        PORTC = 0x00;
        PORTD = 0x00;
        _delay_ms(100);
	   }
	   
	   for(i=0;i<8;i++)
 114:	28 30       	cpi	r18, 0x08	; 8
 116:	31 05       	cpc	r19, r1
 118:	41 f7       	brne	.-48     	; 0xea <main+0x7e>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
	   }
	   
	  
	    for(i=0;i<8;i++)
	   	{
		 PORTA = 0x80>>i; /* Turn ON and OFF one LED at a time */
 11e:	af 01       	movw	r20, r30
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0xbc>
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0xb8>
 12c:	4b bb       	out	0x1b, r20	; 27
		 PORTB = 0x80>>i;
 12e:	48 bb       	out	0x18, r20	; 24
		 PORTC = 0x80>>i;
 130:	45 bb       	out	0x15, r20	; 21
		 PORTD = 0x80>>i;
 132:	42 bb       	out	0x12, r20	; 18
 134:	4f ef       	ldi	r20, 0xFF	; 255
 136:	51 ee       	ldi	r21, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	41 50       	subi	r20, 0x01	; 1
 13c:	50 40       	sbci	r21, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xce>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xd8>
 144:	00 00       	nop
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
         PORTD = 1<<i;
		  _delay_ms(100);
	   }
	   
	  
	    for(i=0;i<8;i++)
 14a:	28 30       	cpi	r18, 0x08	; 8
 14c:	31 05       	cpc	r19, r1
 14e:	39 f7       	brne	.-50     	; 0x11e <main+0xb2>
 150:	96 cf       	rjmp	.-212    	; 0x7e <main+0x12>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
