
06c-UART_Tx_String.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000005c8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000591  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cc  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00000fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028a  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b35  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8f 02 	call	0x51e	; 0x51e <main>
  7a:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t v_baudRate_u32)
{
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	6b 01       	movw	r12, r22
  8c:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((v_baudRate_u32 >= C_MinBaudRate_U32) && (v_baudRate_u32<=C_MaxBaudRate_U32))
  8e:	dc 01       	movw	r26, r24
  90:	cb 01       	movw	r24, r22
  92:	80 56       	subi	r24, 0x60	; 96
  94:	99 40       	sbci	r25, 0x09	; 9
  96:	a1 09       	sbc	r26, r1
  98:	b1 09       	sbc	r27, r1
  9a:	81 3a       	cpi	r24, 0xA1	; 161
  9c:	98 4b       	sbci	r25, 0xB8	; 184
  9e:	a1 40       	sbci	r26, 0x01	; 1
  a0:	b1 05       	cpc	r27, r1
  a2:	98 f4       	brcc	.+38     	; 0xca <UART_SetBaudRate+0x48>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(v_baudRate_u32);
  a4:	a8 ef       	ldi	r26, 0xF8	; 248
  a6:	bf ef       	ldi	r27, 0xFF	; 255
  a8:	a7 01       	movw	r20, r14
  aa:	96 01       	movw	r18, r12
  ac:	0e 94 c3 02 	call	0x586	; 0x586 <__mulohisi3>
  b0:	7c 5d       	subi	r23, 0xDC	; 220
  b2:	8b 40       	sbci	r24, 0x0B	; 11
  b4:	9f 4f       	sbci	r25, 0xFF	; 255
  b6:	e4 e0       	ldi	r30, 0x04	; 4
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	44 1f       	adc	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	ea 95       	dec	r30
  c2:	d1 f7       	brne	.-12     	; 0xb8 <UART_SetBaudRate+0x36>
  c4:	0e 94 9e 02 	call	0x53c	; 0x53c <__udivmodsi4>
  c8:	02 c0       	rjmp	.+4      	; 0xce <UART_SetBaudRate+0x4c>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
  ca:	27 e6       	ldi	r18, 0x67	; 103
  cc:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRRL = util_ExtractByte0to8(RegValue);
  ce:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
  d0:	30 bd       	out	0x20, r19	; 32
}
  d2:	ff 90       	pop	r15
  d4:	ef 90       	pop	r14
  d6:	df 90       	pop	r13
  d8:	cf 90       	pop	r12
  da:	08 95       	ret

000000dc <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t v_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
  dc:	28 e1       	ldi	r18, 0x18	; 24
  de:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
  e0:	26 e8       	ldi	r18, 0x86	; 134
  e2:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
  e4:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(v_baudRate_u32);
  e6:	0c 94 41 00 	jmp	0x82	; 0x82 <UART_SetBaudRate>

000000ea <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char v_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
  ea:	5d 9b       	sbis	0x0b, 5	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <UART_TxChar>
	UDR =v_uartData_u8;                              // Load the data to be transmitted
  ee:	8c b9       	out	0x0c, r24	; 12
  f0:	08 95       	ret

000000f2 <UART_TxNumber.part.0>:
                7.(0x12AB,3) then 3-digits ie. 2AB will be transmitted
                8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
                9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 ***************************************************************************************************/
#if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
  f2:	af 92       	push	r10
  f4:	bf 92       	push	r11
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	1f 92       	push	r1
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	6b 01       	movw	r12, r22
 10e:	7c 01       	movw	r14, r24
    {
        while(v_numOfDigitsToTransmit_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
 110:	aa 24       	eor	r10, r10
 112:	a3 94       	inc	r10
 114:	b1 2c       	mov	r11, r1
{
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToTransmit_u8!=0)
 116:	44 23       	and	r20, r20
 118:	e9 f0       	breq	.+58     	; 0x154 <UART_TxNumber.part.0+0x62>
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	84 0f       	add	r24, r20
 11e:	85 01       	movw	r16, r10
 120:	02 c0       	rjmp	.+4      	; 0x126 <UART_TxNumber.part.0+0x34>
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	8a 95       	dec	r24
 128:	e2 f7       	brpl	.-8      	; 0x122 <UART_TxNumber.part.0+0x30>
 12a:	01 2e       	mov	r0, r17
 12c:	00 0c       	add	r0, r0
 12e:	22 0b       	sbc	r18, r18
 130:	33 0b       	sbc	r19, r19
 132:	0c 21       	and	r16, r12
 134:	1d 21       	and	r17, r13
 136:	2e 21       	and	r18, r14
 138:	3f 21       	and	r19, r15
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	01 2b       	or	r16, r17
 13e:	02 2b       	or	r16, r18
 140:	03 2b       	or	r16, r19
 142:	09 f4       	brne	.+2      	; 0x146 <UART_TxNumber.part.0+0x54>
 144:	80 e0       	ldi	r24, 0x00	; 0
            UART_TxChar(util_Dec2Ascii(i));
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	49 83       	std	Y+1, r20	; 0x01
 14a:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
            v_numOfDigitsToTransmit_u8--;
 14e:	49 81       	ldd	r20, Y+1	; 0x01
 150:	41 50       	subi	r20, 0x01	; 1
 152:	e1 cf       	rjmp	.-62     	; 0x116 <UART_TxNumber.part.0+0x24>
            i--;
        }
    }


}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	df 90       	pop	r13
 164:	cf 90       	pop	r12
 166:	bf 90       	pop	r11
 168:	af 90       	pop	r10
 16a:	08 95       	ret

0000016c <UART_TxString>:
               1.The ptr_string points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if ((Enable_UART_TxString==1)|| (Enable_UART_Printf == 1))
void UART_TxString(char *ptr_string)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	while(*ptr_string)
 172:	89 91       	ld	r24, Y+
 174:	88 23       	and	r24, r24
 176:	19 f0       	breq	.+6      	; 0x17e <UART_TxString+0x12>
		UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
 178:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
 17c:	fa cf       	rjmp	.-12     	; 0x172 <UART_TxString+0x6>
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <UART_TxNumber>:
                8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
                9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 ***************************************************************************************************/
#if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
{
 184:	4f 92       	push	r4
 186:	5f 92       	push	r5
 188:	6f 92       	push	r6
 18a:	7f 92       	push	r7
 18c:	bf 92       	push	r11
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	2a 97       	sbiw	r28, 0x0a	; 10
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	b8 2e       	mov	r11, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	ba 01       	movw	r22, r20
 1b4:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
 1b6:	22 e0       	ldi	r18, 0x02	; 2
 1b8:	b2 12       	cpse	r11, r18
 1ba:	16 c0       	rjmp	.+44     	; 0x1e8 <UART_TxNumber+0x64>
 1bc:	40 2f       	mov	r20, r16
            i--;
        }
    }


}
 1be:	2a 96       	adiw	r28, 0x0a	; 10
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	7f 90       	pop	r7
 1de:	6f 90       	pop	r6
 1e0:	5f 90       	pop	r5
 1e2:	4f 90       	pop	r4
 1e4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <UART_TxNumber.part.0>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
            UART_TxChar(util_Dec2Ascii(i));
            v_numOfDigitsToTransmit_u8--;
        }    
    }     
    else if(v_number_u32==0)
 1e8:	61 15       	cp	r22, r1
 1ea:	71 05       	cpc	r23, r1
 1ec:	81 05       	cpc	r24, r1
 1ee:	91 05       	cpc	r25, r1
 1f0:	49 f0       	breq	.+18     	; 0x204 <UART_TxNumber+0x80>
 1f2:	fe 01       	movw	r30, r28
 1f4:	31 96       	adiw	r30, 0x01	; 1
 1f6:	6f 01       	movw	r12, r30
 1f8:	7f 01       	movw	r14, r30
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 1fa:	4b 2c       	mov	r4, r11
 1fc:	51 2c       	mov	r5, r1
 1fe:	61 2c       	mov	r6, r1
 200:	71 2c       	mov	r7, r1
 202:	1e c0       	rjmp	.+60     	; 0x240 <UART_TxNumber+0xbc>
 204:	10 e0       	ldi	r17, 0x00	; 0
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 206:	10 17       	cp	r17, r16
 208:	a1 f1       	breq	.+104    	; 0x272 <UART_TxNumber+0xee>
 20a:	1a 30       	cpi	r17, 0x0A	; 10
 20c:	91 f1       	breq	.+100    	; 0x272 <UART_TxNumber+0xee>
            UART_TxChar('0');
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 214:	1f 5f       	subi	r17, 0xFF	; 255
 216:	f7 cf       	rjmp	.-18     	; 0x206 <UART_TxNumber+0x82>
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
 218:	61 15       	cp	r22, r1
 21a:	71 05       	cpc	r23, r1
 21c:	81 05       	cpc	r24, r1
 21e:	91 05       	cpc	r25, r1
 220:	a1 f0       	breq	.+40     	; 0x24a <UART_TxNumber+0xc6>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 222:	16 2f       	mov	r17, r22
 224:	a3 01       	movw	r20, r6
 226:	92 01       	movw	r18, r4
 228:	0e 94 9e 02 	call	0x53c	; 0x53c <__udivmodsi4>
 22c:	ca 01       	movw	r24, r20
 22e:	b9 01       	movw	r22, r18
 230:	b2 9e       	mul	r11, r18
 232:	10 19       	sub	r17, r0
 234:	11 24       	eor	r1, r1
 236:	f7 01       	movw	r30, r14
 238:	10 83       	st	Z, r17
 23a:	ff ef       	ldi	r31, 0xFF	; 255
 23c:	ef 1a       	sub	r14, r31
 23e:	ff 0a       	sbc	r15, r31
 240:	1e 2d       	mov	r17, r14
 242:	1c 19       	sub	r17, r12
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
            UART_TxChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
 244:	10 17       	cp	r17, r16
 246:	40 f3       	brcs	.-48     	; 0x218 <UART_TxNumber+0x94>
 248:	0f c0       	rjmp	.+30     	; 0x268 <UART_TxNumber+0xe4>
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 24a:	0b 30       	cpi	r16, 0x0B	; 11
 24c:	68 f4       	brcc	.+26     	; 0x268 <UART_TxNumber+0xe4>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
 24e:	f7 01       	movw	r30, r14
 250:	10 82       	st	Z, r1
 252:	f3 cf       	rjmp	.-26     	; 0x23a <UART_TxNumber+0xb6>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(util_Hex2Ascii(a[i-1]));
 254:	fe 01       	movw	r30, r28
 256:	e1 0f       	add	r30, r17
 258:	f1 1d       	adc	r31, r1
 25a:	80 81       	ld	r24, Z
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	38 f0       	brcs	.+14     	; 0x26e <UART_TxNumber+0xea>
 260:	89 5c       	subi	r24, 0xC9	; 201
 262:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
            i--;
 266:	11 50       	subi	r17, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
 268:	11 11       	cpse	r17, r1
 26a:	f4 cf       	rjmp	.-24     	; 0x254 <UART_TxNumber+0xd0>
 26c:	02 c0       	rjmp	.+4      	; 0x272 <UART_TxNumber+0xee>
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(util_Hex2Ascii(a[i-1]));
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	f8 cf       	rjmp	.-16     	; 0x262 <UART_TxNumber+0xde>
            i--;
        }
    }


}
 272:	2a 96       	adiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	7f 90       	pop	r7
 292:	6f 90       	pop	r6
 294:	5f 90       	pop	r5
 296:	4f 90       	pop	r4
 298:	08 95       	ret

0000029a <UART_Printf>:
        uint8_t v_Num_u8;
		UART_Printf("num1:%u",(uint16_t)v_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <UART_Printf+0x12>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <UART_Printf+0x14>
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	fe 01       	movw	r30, r28
 2b6:	70 96       	adiw	r30, 0x10	; 16
 2b8:	c1 90       	ld	r12, Z+
 2ba:	d1 90       	ld	r13, Z+
#if (Enable_UART_TxFloatNumber==1)
	double v_floatNum_f32;
#endif	


	va_start(argp, argList);
 2bc:	8f 01       	movw	r16, r30

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 2be:	f6 01       	movw	r30, r12
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <UART_Printf+0x2e>
 2c6:	1d c1       	rjmp	.+570    	; 0x502 <UART_Printf+0x268>
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 2c8:	85 32       	cpi	r24, 0x25	; 37
 2ca:	09 f0       	breq	.+2      	; 0x2ce <UART_Printf+0x34>
 2cc:	02 c1       	rjmp	.+516    	; 0x4d2 <UART_Printf+0x238>
		{
		    ptr++;
 2ce:	76 01       	movw	r14, r12
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	e8 1a       	sub	r14, r24
 2d4:	f8 0a       	sbc	r15, r24
		    ch = *ptr;
 2d6:	f6 01       	movw	r30, r12
 2d8:	81 81       	ldd	r24, Z+1	; 0x01
		   if((ch>=0x30) && (ch<=0x39))
 2da:	90 ed       	ldi	r25, 0xD0	; 208
 2dc:	98 0f       	add	r25, r24
 2de:	9a 30       	cpi	r25, 0x0A	; 10
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <UART_Printf+0x4a>
 2e2:	b2 c0       	rjmp	.+356    	; 0x448 <UART_Printf+0x1ae>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
			{
			   v_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 2e6:	90 ed       	ldi	r25, 0xD0	; 208
 2e8:	98 0f       	add	r25, r24
 2ea:	9a 30       	cpi	r25, 0x0A	; 10
 2ec:	58 f4       	brcc	.+22     	; 0x304 <UART_Printf+0x6a>
			    {
				   v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 2ee:	fa e0       	ldi	r31, 0x0A	; 10
 2f0:	2f 9f       	mul	r18, r31
 2f2:	90 0d       	add	r25, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	29 2f       	mov	r18, r25
				   ptr++;
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	e8 1a       	sub	r14, r24
 2fc:	f8 0a       	sbc	r15, r24
				   ch = *ptr;
 2fe:	f7 01       	movw	r30, r14
 300:	80 81       	ld	r24, Z
 302:	f1 cf       	rjmp	.-30     	; 0x2e6 <UART_Printf+0x4c>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 304:	88 35       	cpi	r24, 0x58	; 88
 306:	09 f4       	brne	.+2      	; 0x30a <UART_Printf+0x70>
 308:	a3 c0       	rjmp	.+326    	; 0x450 <UART_Printf+0x1b6>
 30a:	a0 f4       	brcc	.+40     	; 0x334 <UART_Printf+0x9a>
 30c:	83 34       	cpi	r24, 0x43	; 67
 30e:	29 f1       	breq	.+74     	; 0x35a <UART_Printf+0xc0>
 310:	38 f4       	brcc	.+14     	; 0x320 <UART_Printf+0x86>
 312:	85 32       	cpi	r24, 0x25	; 37
 314:	09 f4       	brne	.+2      	; 0x318 <UART_Printf+0x7e>
 316:	d9 c0       	rjmp	.+434    	; 0x4ca <UART_Printf+0x230>
 318:	82 34       	cpi	r24, 0x42	; 66
 31a:	09 f4       	brne	.+2      	; 0x31e <UART_Printf+0x84>
 31c:	b7 c0       	rjmp	.+366    	; 0x48c <UART_Printf+0x1f2>
 31e:	dc c0       	rjmp	.+440    	; 0x4d8 <UART_Printf+0x23e>
 320:	83 35       	cpi	r24, 0x53	; 83
 322:	09 f4       	brne	.+2      	; 0x326 <UART_Printf+0x8c>
 324:	c5 c0       	rjmp	.+394    	; 0x4b0 <UART_Printf+0x216>
 326:	85 35       	cpi	r24, 0x55	; 85
 328:	09 f4       	brne	.+2      	; 0x32c <UART_Printf+0x92>
 32a:	76 c0       	rjmp	.+236    	; 0x418 <UART_Printf+0x17e>
 32c:	84 34       	cpi	r24, 0x44	; 68
 32e:	09 f0       	breq	.+2      	; 0x332 <UART_Printf+0x98>
 330:	d3 c0       	rjmp	.+422    	; 0x4d8 <UART_Printf+0x23e>
 332:	39 c0       	rjmp	.+114    	; 0x3a6 <UART_Printf+0x10c>
 334:	84 36       	cpi	r24, 0x64	; 100
 336:	e9 f0       	breq	.+58     	; 0x372 <UART_Printf+0xd8>
 338:	20 f4       	brcc	.+8      	; 0x342 <UART_Printf+0xa8>
 33a:	82 36       	cpi	r24, 0x62	; 98
 33c:	09 f4       	brne	.+2      	; 0x340 <UART_Printf+0xa6>
 33e:	99 c0       	rjmp	.+306    	; 0x472 <UART_Printf+0x1d8>
 340:	dc c0       	rjmp	.+440    	; 0x4fa <UART_Printf+0x260>
 342:	85 37       	cpi	r24, 0x75	; 117
 344:	09 f4       	brne	.+2      	; 0x348 <UART_Printf+0xae>
 346:	55 c0       	rjmp	.+170    	; 0x3f2 <UART_Printf+0x158>
 348:	88 37       	cpi	r24, 0x78	; 120
 34a:	09 f4       	brne	.+2      	; 0x34e <UART_Printf+0xb4>
 34c:	73 c0       	rjmp	.+230    	; 0x434 <UART_Printf+0x19a>
 34e:	ae c0       	rjmp	.+348    	; 0x4ac <UART_Printf+0x212>
 350:	89 35       	cpi	r24, 0x59	; 89
 352:	60 f4       	brcc	.+24     	; 0x36c <UART_Printf+0xd2>
 354:	83 34       	cpi	r24, 0x43	; 67
 356:	09 f0       	breq	.+2      	; 0x35a <UART_Printf+0xc0>
 358:	56 c0       	rjmp	.+172    	; 0x406 <UART_Printf+0x16c>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, int);
 35a:	68 01       	movw	r12, r16
 35c:	f2 e0       	ldi	r31, 0x02	; 2
 35e:	cf 0e       	add	r12, r31
 360:	d1 1c       	adc	r13, r1
				UART_TxChar(ch);
 362:	f8 01       	movw	r30, r16
 364:	80 81       	ld	r24, Z
 366:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
 36a:	ab c0       	rjmp	.+342    	; 0x4c2 <UART_Printf+0x228>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 36c:	84 36       	cpi	r24, 0x64	; 100
 36e:	d9 f5       	brne	.+118    	; 0x3e6 <UART_Printf+0x14c>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 370:	2f ef       	ldi	r18, 0xFF	; 255
				ch = va_arg(argp, int);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				v_num_s16 = va_arg(argp, sint16_t);
 372:	68 01       	movw	r12, r16
 374:	f2 e0       	ldi	r31, 0x02	; 2
 376:	cf 0e       	add	r12, r31
 378:	d1 1c       	adc	r13, r1
 37a:	f8 01       	movw	r30, r16
 37c:	00 81       	ld	r16, Z
 37e:	11 81       	ldd	r17, Z+1	; 0x01
				if(v_num_s16<0)
 380:	17 ff       	sbrs	r17, 7
 382:	08 c0       	rjmp	.+16     	; 0x394 <UART_Printf+0xfa>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   v_num_s16 = -v_num_s16;
 384:	11 95       	neg	r17
 386:	01 95       	neg	r16
 388:	11 09       	sbc	r17, r1
				   UART_TxChar('-');
 38a:	8d e2       	ldi	r24, 0x2D	; 45
 38c:	2d 83       	std	Y+5, r18	; 0x05
 38e:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
 392:	2d 81       	ldd	r18, Y+5	; 0x05
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
 394:	a8 01       	movw	r20, r16
 396:	11 0f       	add	r17, r17
 398:	66 0b       	sbc	r22, r22
 39a:	77 0b       	sbc	r23, r23
 39c:	46 c0       	rjmp	.+140    	; 0x42a <UART_Printf+0x190>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 39e:	84 34       	cpi	r24, 0x44	; 68
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <UART_Printf+0x10a>
 3a2:	9a c0       	rjmp	.+308    	; 0x4d8 <UART_Printf+0x23e>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				v_num_s32 = va_arg(argp, sint32_t);				
 3a6:	68 01       	movw	r12, r16
 3a8:	f4 e0       	ldi	r31, 0x04	; 4
 3aa:	cf 0e       	add	r12, r31
 3ac:	d1 1c       	adc	r13, r1
 3ae:	f8 01       	movw	r30, r16
 3b0:	40 81       	ld	r20, Z
 3b2:	51 81       	ldd	r21, Z+1	; 0x01
 3b4:	62 81       	ldd	r22, Z+2	; 0x02
 3b6:	73 81       	ldd	r23, Z+3	; 0x03
				if(v_num_s32<0)
 3b8:	77 ff       	sbrs	r23, 7
 3ba:	37 c0       	rjmp	.+110    	; 0x42a <UART_Printf+0x190>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   v_num_s32 = -v_num_s32;
 3bc:	70 95       	com	r23
 3be:	60 95       	com	r22
 3c0:	50 95       	com	r21
 3c2:	41 95       	neg	r20
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	6f 4f       	sbci	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
				   UART_TxChar('-');
 3ca:	8d e2       	ldi	r24, 0x2D	; 45
 3cc:	2d 83       	std	Y+5, r18	; 0x05
 3ce:	49 83       	std	Y+1, r20	; 0x01
 3d0:	5a 83       	std	Y+2, r21	; 0x02
 3d2:	6b 83       	std	Y+3, r22	; 0x03
 3d4:	7c 83       	std	Y+4, r23	; 0x04
 3d6:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
 3da:	7c 81       	ldd	r23, Y+4	; 0x04
 3dc:	6b 81       	ldd	r22, Y+3	; 0x03
 3de:	5a 81       	ldd	r21, Y+2	; 0x02
 3e0:	49 81       	ldd	r20, Y+1	; 0x01
 3e2:	2d 81       	ldd	r18, Y+5	; 0x05
 3e4:	22 c0       	rjmp	.+68     	; 0x42a <UART_Printf+0x190>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 3e6:	85 36       	cpi	r24, 0x65	; 101
 3e8:	08 f4       	brcc	.+2      	; 0x3ec <UART_Printf+0x152>
 3ea:	3f c0       	rjmp	.+126    	; 0x46a <UART_Printf+0x1d0>
 3ec:	85 37       	cpi	r24, 0x75	; 117
 3ee:	f9 f4       	brne	.+62     	; 0x42e <UART_Printf+0x194>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);			
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				v_num_u16 = va_arg(argp, uint16_t);			
 3f2:	68 01       	movw	r12, r16
 3f4:	f2 e0       	ldi	r31, 0x02	; 2
 3f6:	cf 0e       	add	r12, r31
 3f8:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
 3fa:	f8 01       	movw	r30, r16
 3fc:	40 81       	ld	r20, Z
 3fe:	51 81       	ldd	r21, Z+1	; 0x01
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	12 c0       	rjmp	.+36     	; 0x42a <UART_Printf+0x190>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 406:	84 34       	cpi	r24, 0x44	; 68
 408:	08 f4       	brcc	.+2      	; 0x40c <UART_Printf+0x172>
 40a:	5d c0       	rjmp	.+186    	; 0x4c6 <UART_Printf+0x22c>
 40c:	83 35       	cpi	r24, 0x53	; 83
 40e:	09 f4       	brne	.+2      	; 0x412 <UART_Printf+0x178>
 410:	4f c0       	rjmp	.+158    	; 0x4b0 <UART_Printf+0x216>
 412:	85 35       	cpi	r24, 0x55	; 85
 414:	21 f6       	brne	.-120    	; 0x39e <UART_Printf+0x104>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 416:	2f ef       	ldi	r18, 0xFF	; 255
				v_num_u16 = va_arg(argp, uint16_t);			
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				v_num_u32 = va_arg(argp, uint32_t);			
 418:	68 01       	movw	r12, r16
 41a:	f4 e0       	ldi	r31, 0x04	; 4
 41c:	cf 0e       	add	r12, r31
 41e:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
 420:	f8 01       	movw	r30, r16
 422:	40 81       	ld	r20, Z
 424:	51 81       	ldd	r21, Z+1	; 0x01
 426:	62 81       	ldd	r22, Z+2	; 0x02
 428:	73 81       	ldd	r23, Z+3	; 0x03
 42a:	8a e0       	ldi	r24, 0x0A	; 10
 42c:	1b c0       	rjmp	.+54     	; 0x464 <UART_Printf+0x1ca>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 42e:	88 37       	cpi	r24, 0x78	; 120
 430:	e9 f5       	brne	.+122    	; 0x4ac <UART_Printf+0x212>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 432:	2f ef       	ldi	r18, 0xFF	; 255
				v_num_u32 = va_arg(argp, uint32_t);			
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u16 = va_arg(argp, uint16_t);				
 434:	68 01       	movw	r12, r16
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	cf 0e       	add	r12, r31
 43a:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
 43c:	f8 01       	movw	r30, r16
 43e:	40 81       	ld	r20, Z
 440:	51 81       	ldd	r21, Z+1	; 0x01
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	0d c0       	rjmp	.+26     	; 0x462 <UART_Printf+0x1c8>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 448:	88 35       	cpi	r24, 0x58	; 88
 44a:	09 f0       	breq	.+2      	; 0x44e <UART_Printf+0x1b4>
 44c:	81 cf       	rjmp	.-254    	; 0x350 <UART_Printf+0xb6>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 44e:	2f ef       	ldi	r18, 0xFF	; 255
				v_num_u16 = va_arg(argp, uint16_t);				
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u32 = va_arg(argp, uint32_t);						
 450:	68 01       	movw	r12, r16
 452:	f4 e0       	ldi	r31, 0x04	; 4
 454:	cf 0e       	add	r12, r31
 456:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
 458:	f8 01       	movw	r30, r16
 45a:	40 81       	ld	r20, Z
 45c:	51 81       	ldd	r21, Z+1	; 0x01
 45e:	62 81       	ldd	r22, Z+2	; 0x02
 460:	73 81       	ldd	r23, Z+3	; 0x03
 462:	80 e1       	ldi	r24, 0x10	; 16
 464:	0e 94 c2 00 	call	0x184	; 0x184 <UART_TxNumber>
 468:	2c c0       	rjmp	.+88     	; 0x4c2 <UART_Printf+0x228>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 46a:	82 36       	cpi	r24, 0x62	; 98
 46c:	09 f0       	breq	.+2      	; 0x470 <UART_Printf+0x1d6>
 46e:	45 c0       	rjmp	.+138    	; 0x4fa <UART_Printf+0x260>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 470:	2f ef       	ldi	r18, 0xFF	; 255
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u16 = va_arg(argp, uint16_t);		
 472:	68 01       	movw	r12, r16
 474:	f2 e0       	ldi	r31, 0x02	; 2
 476:	cf 0e       	add	r12, r31
 478:	d1 1c       	adc	r13, r1
 47a:	f8 01       	movw	r30, r16
 47c:	60 81       	ld	r22, Z
 47e:	71 81       	ldd	r23, Z+1	; 0x01
				
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 480:	2f 3f       	cpi	r18, 0xFF	; 255
 482:	09 f4       	brne	.+2      	; 0x486 <UART_Printf+0x1ec>
				   v_numOfDigitsToTransmit_u8 = 16;
 484:	20 e1       	ldi	r18, 0x10	; 16
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0c c0       	rjmp	.+24     	; 0x4a4 <UART_Printf+0x20a>
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u32 = va_arg(argp, uint32_t);			
 48c:	68 01       	movw	r12, r16
 48e:	f4 e0       	ldi	r31, 0x04	; 4
 490:	cf 0e       	add	r12, r31
 492:	d1 1c       	adc	r13, r1
 494:	f8 01       	movw	r30, r16
 496:	60 81       	ld	r22, Z
 498:	71 81       	ldd	r23, Z+1	; 0x01
 49a:	82 81       	ldd	r24, Z+2	; 0x02
 49c:	93 81       	ldd	r25, Z+3	; 0x03
                
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 49e:	2f 3f       	cpi	r18, 0xFF	; 255
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <UART_Printf+0x20a>
				   v_numOfDigitsToTransmit_u8 = 32;		
 4a2:	20 e2       	ldi	r18, 0x20	; 32
 4a4:	42 2f       	mov	r20, r18
 4a6:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_TxNumber.part.0>
 4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <UART_Printf+0x228>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4ac:	83 37       	cpi	r24, 0x73	; 115
 4ae:	a1 f4       	brne	.+40     	; 0x4d8 <UART_Printf+0x23e>
				break;                


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 4b0:	68 01       	movw	r12, r16
 4b2:	f2 e0       	ldi	r31, 0x02	; 2
 4b4:	cf 0e       	add	r12, r31
 4b6:	d1 1c       	adc	r13, r1
				UART_TxString(str);			
 4b8:	f8 01       	movw	r30, r16
 4ba:	80 81       	ld	r24, Z
 4bc:	91 81       	ldd	r25, Z+1	; 0x01
 4be:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_TxString>
				break;                


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 4c2:	86 01       	movw	r16, r12
				UART_TxString(str);			
				break;
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <UART_Printf+0x23e>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4c6:	85 32       	cpi	r24, 0x25	; 37
 4c8:	61 f4       	brne	.+24     	; 0x4e2 <UART_Printf+0x248>
				str = va_arg(argp, char *);
				UART_TxString(str);			
				break;

			case '%':
				UART_TxChar('%');
 4ca:	85 e2       	ldi	r24, 0x25	; 37
 4cc:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
				break;
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <UART_Printf+0x23e>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
 4d2:	0e 94 75 00 	call	0xea	; 0xea <UART_TxChar>
 4d6:	76 01       	movw	r14, r12


	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 4d8:	67 01       	movw	r12, r14
 4da:	ff ef       	ldi	r31, 0xFF	; 255
 4dc:	cf 1a       	sub	r12, r31
 4de:	df 0a       	sbc	r13, r31
 4e0:	ee ce       	rjmp	.-548    	; 0x2be <UART_Printf+0x24>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4e2:	82 34       	cpi	r24, 0x42	; 66
 4e4:	c9 f7       	brne	.-14     	; 0x4d8 <UART_Printf+0x23e>
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u32 = va_arg(argp, uint32_t);			
 4e6:	68 01       	movw	r12, r16
 4e8:	f4 e0       	ldi	r31, 0x04	; 4
 4ea:	cf 0e       	add	r12, r31
 4ec:	d1 1c       	adc	r13, r1
 4ee:	f8 01       	movw	r30, r16
 4f0:	60 81       	ld	r22, Z
 4f2:	71 81       	ldd	r23, Z+1	; 0x01
 4f4:	82 81       	ldd	r24, Z+2	; 0x02
 4f6:	93 81       	ldd	r25, Z+3	; 0x03
 4f8:	d4 cf       	rjmp	.-88     	; 0x4a2 <UART_Printf+0x208>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4fa:	83 36       	cpi	r24, 0x63	; 99
 4fc:	09 f4       	brne	.+2      	; 0x500 <UART_Printf+0x266>
 4fe:	2d cf       	rjmp	.-422    	; 0x35a <UART_Printf+0xc0>
 500:	eb cf       	rjmp	.-42     	; 0x4d8 <UART_Printf+0x23e>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	cf 90       	pop	r12
 51c:	08 95       	ret

0000051e <main>:

#include "uart.h"

int main() 
{
    UART_Init(9600);
 51e:	60 e8       	ldi	r22, 0x80	; 128
 520:	75 e2       	ldi	r23, 0x25	; 37
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 6e 00 	call	0xdc	; 0xdc <UART_Init>
    
    while(1)
    {
        UART_Printf("Welcome to AVR Serial Programming by ExploreEmbedded\n\r");
 52a:	c0 e6       	ldi	r28, 0x60	; 96
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Printf>
    }
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	f9 cf       	rjmp	.-14     	; 0x52e <main+0x10>

0000053c <__udivmodsi4>:
 53c:	a1 e2       	ldi	r26, 0x21	; 33
 53e:	1a 2e       	mov	r1, r26
 540:	aa 1b       	sub	r26, r26
 542:	bb 1b       	sub	r27, r27
 544:	fd 01       	movw	r30, r26
 546:	0d c0       	rjmp	.+26     	; 0x562 <__udivmodsi4_ep>

00000548 <__udivmodsi4_loop>:
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	ee 1f       	adc	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	a2 17       	cp	r26, r18
 552:	b3 07       	cpc	r27, r19
 554:	e4 07       	cpc	r30, r20
 556:	f5 07       	cpc	r31, r21
 558:	20 f0       	brcs	.+8      	; 0x562 <__udivmodsi4_ep>
 55a:	a2 1b       	sub	r26, r18
 55c:	b3 0b       	sbc	r27, r19
 55e:	e4 0b       	sbc	r30, r20
 560:	f5 0b       	sbc	r31, r21

00000562 <__udivmodsi4_ep>:
 562:	66 1f       	adc	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	1a 94       	dec	r1
 56c:	69 f7       	brne	.-38     	; 0x548 <__udivmodsi4_loop>
 56e:	60 95       	com	r22
 570:	70 95       	com	r23
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	9b 01       	movw	r18, r22
 578:	ac 01       	movw	r20, r24
 57a:	bd 01       	movw	r22, r26
 57c:	cf 01       	movw	r24, r30
 57e:	08 95       	ret

00000580 <__mulshisi3>:
 580:	b7 ff       	sbrs	r27, 7
 582:	0c 94 c8 02 	jmp	0x590	; 0x590 <__muluhisi3>

00000586 <__mulohisi3>:
 586:	0e 94 c8 02 	call	0x590	; 0x590 <__muluhisi3>
 58a:	82 1b       	sub	r24, r18
 58c:	93 0b       	sbc	r25, r19
 58e:	08 95       	ret

00000590 <__muluhisi3>:
 590:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__umulhisi3>
 594:	a5 9f       	mul	r26, r21
 596:	90 0d       	add	r25, r0
 598:	b4 9f       	mul	r27, r20
 59a:	90 0d       	add	r25, r0
 59c:	a4 9f       	mul	r26, r20
 59e:	80 0d       	add	r24, r0
 5a0:	91 1d       	adc	r25, r1
 5a2:	11 24       	eor	r1, r1
 5a4:	08 95       	ret

000005a6 <__umulhisi3>:
 5a6:	a2 9f       	mul	r26, r18
 5a8:	b0 01       	movw	r22, r0
 5aa:	b3 9f       	mul	r27, r19
 5ac:	c0 01       	movw	r24, r0
 5ae:	a3 9f       	mul	r26, r19
 5b0:	70 0d       	add	r23, r0
 5b2:	81 1d       	adc	r24, r1
 5b4:	11 24       	eor	r1, r1
 5b6:	91 1d       	adc	r25, r1
 5b8:	b2 9f       	mul	r27, r18
 5ba:	70 0d       	add	r23, r0
 5bc:	81 1d       	adc	r24, r1
 5be:	11 24       	eor	r1, r1
 5c0:	91 1d       	adc	r25, r1
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
