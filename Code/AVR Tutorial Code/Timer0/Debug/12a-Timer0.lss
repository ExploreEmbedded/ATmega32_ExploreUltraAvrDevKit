
12a-Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000096  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000060  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ad  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000147  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  00000487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define LED PD4 

int main()
{
	 uint8_t timerOverflowCount=0;	
	 DDRD=0xff;         //configure PORTD as output	
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	 TCNT0=0x00;
  70:	12 be       	out	0x32, r1	; 50
	 TCCR0 = (1<<CS00) | (1<<CS02);
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	83 bf       	out	0x33, r24	; 51
	 
	while(1)
	{			
		 while ((TIFR & 0x01) == 0); 
		  TCNT0 = 0x00;
		  TIFR=0x01; //clear timer1 overflow flag		              
  76:	21 e0       	ldi	r18, 0x01	; 1
		 timerOverflowCount++;		 
		 if (timerOverflowCount>=6)
		 {
			 PORTD ^= (0x01 << LED);			 
  78:	90 e1       	ldi	r25, 0x10	; 16
#include<avr/io.h>
#define LED PD4 

int main()
{
  7a:	86 e0       	ldi	r24, 0x06	; 6
	 TCNT0=0x00;
	 TCCR0 = (1<<CS00) | (1<<CS02);
	 
	while(1)
	{			
		 while ((TIFR & 0x01) == 0); 
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	00 fe       	sbrs	r0, 0
  80:	fd cf       	rjmp	.-6      	; 0x7c <main+0x10>
		  TCNT0 = 0x00;
  82:	12 be       	out	0x32, r1	; 50
		  TIFR=0x01; //clear timer1 overflow flag		              
  84:	28 bf       	out	0x38, r18	; 56
  86:	81 50       	subi	r24, 0x01	; 1
		 timerOverflowCount++;		 
		 if (timerOverflowCount>=6)
  88:	c9 f7       	brne	.-14     	; 0x7c <main+0x10>
		 {
			 PORTD ^= (0x01 << LED);			 
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	89 27       	eor	r24, r25
  8e:	82 bb       	out	0x12, r24	; 18
  90:	f4 cf       	rjmp	.-24     	; 0x7a <main+0xe>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
